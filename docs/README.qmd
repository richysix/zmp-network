---
title: "ZMP Network"
format: gfm
editor: source
---

![](docs/schematic.excalidraw.svg)

## Processes

### LOG_INFO

Prints out some information about input files and settings. Only run if the 
debug param is greater than 0. Executed locally.

### SUBSET_COUNTS

Creates a sample and count file for each individual experiment with the counts
aggregated to the gene level.

Inputs:

1. Samples file: Tab-separated file, must contain columns `expt` and `sample`

1. Counts file: Comma-separated file containing counts for all the samples (Can be gzipped)

Outputs:

1. expts_file: File containing expt directory names

1. sample_files: Tuple of sample files

1. count_files: Tuple of count files

These are processed to create Tuples containing expt name, sample file and 
count file for `CREATE_BASE_NETWORK`.

Script:
    Runs `subset-by-expt.sh` which in turn runs `subset-by-expt.py`

### CREATE_BASE_NETWORK

Creates a base correlation network containing ALL edges and one with 
edge weights converted to absolute values and edges with weights less than 
0.2 discarded. It also removes genes that lead to spurious high correlations 
due to large numbers of zeros values.

Inputs:

1. Tuple of expt name, sample file and count file

1. Path to the transcripts file (needed to convert counts to TPM)

Outputs:

1. sample_files: Tuple of experiment name and samples file paths.

1. tpms_file: Tuple of experiment name and TPM file path.

1. tab_file: Tuple of experiment name and MCL file mapping node ids to gene ids.

1. base_network: Tuple of experiment name and MCL network (binary) file 
detailing all the edges in the network and their weights.

1. filtered_tpms_file: Tuple of experiment name and TPM file filtered by zeros

1. no_all_zeros_tpms_file: Tuple of experiment name and TPM file with genes 
where all values are zero removed

1. filtered_tab_file: Tuple of experiment name and MCL tab file for the TPM file 
filtered by zeros

1. filtered_network: Tuple of experiment name and MCL network (binary) file 
creating from the filtered_tpms_file

1. filtered_t20_network: Tuple of experiment name and MCL network (binary) file
with absolute edge weights. Edges with weights less than 0.2 have been removed.

1. cor_hist: path to file containing counts of edges with correlation values in
0.1 width bins

1. filtered_cor_hist: same as cor_hist for filtered network

Script:
    Runs `counts-to-fpkm-tpm.R` and then `mcxarray`, `mcx query` and `mcx alter`

### TEST_PARAMETERS

Collects stats on node degree and singletons when the correlation threshold is
varied. Also collects stats on filtering using k-nearest neighbours.
Uses the `filtered_t20_network` output channel from `CREATE_BASE_NETWORK` as input.

Inputs: 

1. Tuple of expt name and MCX file path

Outputs:

1. vary_threshold_stats: Tuple of paths to the stats output files from `mcx query`

Script:
    Runs `mcx query`

### FILTER_COR

Using the threshold parameters to create pruned networks. Uses the 
`filtered_network` output channel from `CREATE_BASE_NETWORK` as input.

Inputs:

1. Tuple of expt name and MCX file path

1. Threshold parameter

Outputs:

1. filtered_mcx: Tuple of expt name and path to filtered MCX file

1. node_stats: Stats file for filtered network

Script:
    Runs `mcx alter` and `mcx query`

### FILTER_KNN

Using the knn parameters to create pruned networks. Uses the 
`filtered_network` output channel from `CREATE_BASE_NETWORK` as input.

Inputs:

1. Tuple of expt name and MCX file path

1. Threshold parameter

Outputs:

1. filtered_mcx: Tuple of expt name and path to filtered MCX file

1. node_stats: Stats file for filtered network

Script:
    Runs `mcx alter` and `mcx query`

### CLUSTER_NETWORK

Clusters the supplied network.

Inputs:

1. Tuple of expt name and MCX file path

1. Inflation values: From `inflationParams` in the config. This is a list.
The CLUSTER process is run once for each inflation value in the list.

Outputs:  

1. clustering: Tuple of expt name. MCX file and clustered MCX file

1. cluster_sizes: File of cluster ids and sizes (i.e. number of nodes)

1. stats: Stats file and info file

Script:
Runs `mcl`, `clm info` and `summarise_clustering.py`

### RUN_GUILT_BY_ASSOCIATION

Converts the clustered MCI file to nodes and edges files. Then runs GBA on
the network.

Inputs:

1. Tuple of expt name, tab file, MCX file, Cluster file

1. Annotation file: Tab-separated file of Gene annotation (Chr, Start End, ID, Name etc.)

1. GO annotation file: Tab-separated file of GO annotation (GeneID, TermID, Component)

1. ZFA annotation file: Tab-separated file of ZFA annotation (GeneID, TermID)

Outputs:

1. graph_files: Tuple of cluster file, graphml files, nodes file and edges file

    1. MCX Cluster file

    1. Graphml file: For importing into Cytoscape etc.

    1. Nodes file: Comma-separated file of node information with Name and Cluster id

    1. Edges files: Comma-separated file of edge information with source, target and weight

1. auc_files: Files with AUC values for each term from GO and ZFA ontologies

1. gba_out: Tuple of 

    1. GBA output: Output file from GBA with gene scores for each GO term

    1. Plots file: Histograms of AUC values

Script:
Runs ` mcx convert`, `convert_mcl.py` and `run-GBA-network.R`

### RUN_POST_GBA_STATS

Analyses the effect of different thresholds and clustering parameters on the 
quality of the network/clusters

Inputs:

1. Expts file: The `expts_file` output channel from `SUBSET_COUNTS`

1. Samples file: Tab-separated file, must contain columns `expt` and `sample`

1. auc_files: Files with AUC values for each term from GO and ZFA ontologies
`auc_files_ch` output channel from `RUN_GUILT_BY_ASSOCIATION`

1. cluster_sizes: Cluster sizes files. `cluster_sizes` output channel from 
`CLUSTER_NETWORK`
 
Outputs:

1. plots: paths to output plots

1. tsv: Tab-separated output files. Contain values for the ecdf 
(empirical cumulative density function) cluster sizes

1. html: html output showing % of nodes in each network of sizes between 100 and 1000

### ENRICHMENT

Runs topGO enrichment on the individual clusters in the network

Inputs:

1. `graph_files` output channel from `RUN_GUILT_BY_ASSOCIATION`. Tuple of

    1. Clustered MCI file

    1. Graphml  file
    
    1. Nodes file
    
    1. Edge file

1. GO annotation file. `go_anno_file` output channel from `GET_ANNO_GET_GO_ANNO`

Outputs:

1. go_output: Tuple of  

    1. Cluster File

    1. topGO output directory

Script:
Runs `create_files_for_topgo.py` and `run_topgo.pl`

### PUBLISH_NETWORKS

Takes all of the output files and runs a python script to pick the best 
clustering for that experiment and publish just those files.

Inputs:

1. Expts: Tuple of

    1. Expt name
    
    1. Filter method (cor or knn)
    
1. ecdf tsv files: `tsv` output channel from RUN_POST_GBA_STATS

1. MCX files: `filtered_network_ch`

1. Stats files: network stats files

1. Graph files: graphs and GO output

1. AUC files:

1. GBA output files

Outputs:

1. pub_files: The files to publish. Organised into one directory for each experiment

## Process DAG

{{< include _dag-current.md >}}

