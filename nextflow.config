report.overwrite = true
timelime.overwrite = true
dag.overwrite = true

params.testing = false
params.clustering = false
params.BaseDir = "$SCRATCH/detct/grcz11"
params.ScriptDir = "$HOME/checkouts/zmp-network/scripts"
params.QsubDir = "$HOME/checkouts/zmp-network/qsub"
params.DirPrefix = "expt"
params.RefDir = "$SCRATCH/detct/grcz11/reference"

if (params.testing) {
    params.expts = "$params.BaseDir/expt-sample-condition-test.tsv"
    params.all_counts = "$params.BaseDir/everything/filter-strict/all-test.csv.gz"
    params.med_mem = ['1G', '1G']
    params.big_mem = ['1G', '2G']
    params.huge_mem = ['4G', '8G']
    params.minTermSize = 10
    params.maxTermSize = 50
    params.threshold = [0.7, 0.8]
    params.knn = [120, 80]
    params.inflationParams = [3, 4]
    executor {
        name = "local"
//        retry.delay = "1000ms"
//        submitRateLimit = "1sec"
    }
} else {
//    params.expts = "$params.BaseDir/expt-sample-condition.tsv"
    params.expts = "$params.BaseDir/expt-sample-condition-tfap2.tsv"
    params.all_counts = "$params.BaseDir/everything/filter-strict/all.csv.gz"
    params.med_mem = ['4G', '8G']
    params.big_mem = ['8G', '16G']
    params.huge_mem = ['80G', '128G']
    params.minTermSize = 10
    params.maxTermSize = 1000
    params.threshold = [0.6, 0.7, 0.8, 0.9]
    params.knn = [240, 200, 160, 120, 80]
    params.inflationParams = [1.4, 2, 4]
    executor {
        name = "sge"
        retry.delay = "1000ms"
        submitRateLimit = "1sec"
    }
}

params.EnsemblVersion = "99"
params.GO_URL = "https://raw.githubusercontent.com/iansealy/topgo-wrapper/refs/heads/master/data/danio_rerio_e${params.EnsemblVersion}_go.txt"
params.GOFile = "$params.RefDir/danio_rerio_e99_go.txt"
params.goMinClusterSize = 50
params.ZFAFile = "$params.RefDir/Dr-e98-Gene2ZFA.txt"
params.transcriptFile = "$params.RefDir/Danio_rerio.GRCz11.98.transcripts.tsv"
params.AnnotationFile = "$params.RefDir/Dr-e92-annotation.txt"
params.knnTestParams = "100/300/20"
params.corMeasure = "--pearson" // -c
params.labels = "-l 1" // -l
params.skipRows = "-skipr 1" // -r
params.skipCols = "-skipc 2" // -s
params.mclVersion = "14-137" // -m
params.RVersion = "4.3.1" // -v
params.PythonVersion = "3.12.4"

process {
    cpus = 1
    time = '1h'
    penv = 'smp'

    withLabel: local {
        executor = 'local'
    }

    withLabel: retry {
        time = { 
            if (task.attempt > 1) {
                return '240h'
            } else {
                return '1h'
            }
        }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 1
    }

    withLabel: med_mem_retry {
        clusterOptions = {
            if (task.attempt > 1) {
                return "-l h_vmem=${params.med_mem[1]}"
            } else {
                return "-l h_vmem=${params.med_mem[0]}"
            }
        }
        time = { 
            if (task.attempt > 1) {
                return '240h'
            } else {
                return '1h'
            }
        }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 1
    }

    withLabel: big_mem_retry {
        clusterOptions = {
            if (task.attempt > 1) {
                return "-l h_vmem=${params.big_mem[1]}"
            } else {
                return "-l h_vmem=${params.big_mem[0]}"
            }
        }
        time = { 
            if (task.attempt > 1) {
                return '240h'
            } else {
                return '1h'
            }
        }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 1
    }

    withLabel: huge_mem_retry {
        clusterOptions = {
            if (task.attempt > 1) {
                return "-l h_vmem=${params.huge_mem[1]}"
            } else {
                return "-l h_vmem=${params.huge_mem[0]}"
            }
        }
        time = { 
            if (task.attempt > 1) {
                return '240h'
            } else {
                return '1h'
            }
        }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 1
    }
}
