report.overwrite = true
timelime.overwrite = true
dag.overwrite = true

params.testing = false
params.clustering = false
params.debug = false
params.BaseDir = "$SCRATCH/detct/grcz11"
params.ScriptDir = "$HOME/checkouts/zmp-network/scripts"
params.QsubDir = "$HOME/checkouts/zmp-network/qsub"
params.RefDir = "$SCRATCH/detct/grcz11/reference"
params.Species='danio_rerio'
params.EnsemblVersion = "98"
params.EnsemblVersionGO = "109"
params.knnTestParams = "80/300/20"
params.corMeasure = "--spearman" // -c
params.labels = "-l 1" // -l
params.skipRows = "-skipr 1" // -r
params.skipCols = "-skipc 2" // -s
params.mclVersion = "14-137" // -m
params.RVersion = "4.4.0" // -v
params.PythonVersion = "3.12.4"

if (params.testing) {
    // params.expts = "$params.BaseDir/expt-sample-condition-test.tsv"
    // params.all_counts = "$params.BaseDir/everything/filter-strict/all-test.csv.gz"
    // params.transcriptFile = "$params.RefDir/Danio_rerio.GRCz11.98.transcripts.tsv"
    params.expts = "$HOME/checkouts/zmp-network/data/test-samples.tsv"
    params.all_counts = "$HOME/checkouts/zmp-network/data/test-counts.csv"
    params.transcriptFile = "$HOME/checkouts/zmp-network/data/test-transcript-lengths.tsv"
    params.AnnotationFile = "$HOME/checkouts/zmp-network/data/test-annotation.txt"
    params.GOFile = "$HOME/checkouts/zmp-network/data/test-go.txt"
    params.goMinClusterSize = 1
    params.ZFAFile = "$HOME/checkouts/zmp-network/data/test-zfa.txt"
    params.mem = ['1G', '1G']
    params.med_mem = ['1G', '1G']
    params.big_mem = ['1G', '2G']
    params.huge_mem = ['4G', '8G']
    params.minTermSize = 0
    params.maxTermSize = 10
    params.threshold = [0.4, 0.5]
    params.knn = [3, 4]
    params.inflationParams = [1.4, 1.7]
    executor {
        name = "local"
//        retry.delay = "1000ms"
//        submitRateLimit = "1sec"
    }
} else {
    params.expts = "$params.BaseDir/expt-sample-condition-tfap2-plus.tsv"
    params.all_counts = "$params.BaseDir/everything/filter-strict/all.csv.gz"
    params.transcriptFile = "$params.RefDir/Danio_rerio.GRCz11.98.transcripts.tsv"
    params.AnnotationFile = "$params.RefDir/Dr-e92-annotation.txt"
    params.GOFile = "$params.RefDir/danio_rerio_e${params.EnsemblVersionGO}_go.txt"
    params.goMinClusterSize = 50
    params.ZFAFile = "$params.RefDir/Dr-e98-Gene2ZFA.txt"
    params.mem = ['1G', '2G']
    params.med_mem = ['4G', '8G']
    params.big_mem = ['16G', '32G']
    params.huge_mem = ['80G', '128G']
    params.minTermSize = 10
    params.maxTermSize = 1000
    params.threshold = [0.44, 0.6, 0.7, 0.8, 0.9]
    params.knn = [240, 200, 160, 120, 80]
    params.inflationParams = [1.4, 1.5, 1.6, 1.7]
    executor {
        name = "sge"
        retry.delay = "1000ms"
        submitRateLimit = "1sec"
    }
}

process {
    cpus = 1
    time = '1h'
    penv = 'smp'

    withLabel: local {
        executor = 'local'
    }

    withLabel: retry {
        clusterOptions = {
            if (task.attempt > 1) {
                return "-l h_vmem=${params.mem[1]}"
            } else {
                return "-l h_vmem=${params.mem[0]}"
            }
        }
        time = { 
            if (task.attempt > 1) {
                return '240h'
            } else {
                return '1h'
            }
        }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'finish' }
        maxRetries = 1
    }

    withLabel: med_mem_retry {
        clusterOptions = {
            if (task.attempt > 1) {
                return "-l h_vmem=${params.med_mem[1]}"
            } else {
                return "-l h_vmem=${params.med_mem[0]}"
            }
        }
        time = { 
            if (task.attempt > 1) {
                return '240h'
            } else {
                return '1h'
            }
        }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'finish' }
        maxRetries = 1
    }

    withLabel: big_mem_retry {
        clusterOptions = {
            if (task.attempt > 1) {
                return "-l h_vmem=${params.big_mem[1]}"
            } else {
                return "-l h_vmem=${params.big_mem[0]}"
            }
        }
        time = { 
            if (task.attempt > 1) {
                return '240h'
            } else {
                return '1h'
            }
        }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'finish' }
        maxRetries = 1
    }

    withLabel: huge_mem_retry {
        clusterOptions = {
            if (task.attempt > 1) {
                return "-l h_vmem=${params.huge_mem[1]}"
            } else {
                return "-l h_vmem=${params.huge_mem[0]}"
            }
        }
        time = { 
            if (task.attempt > 1) {
                return '240h'
            } else {
                return '1h'
            }
        }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'finish' }
        maxRetries = 1
    }
}
